{"name":"GoDLX","tagline":"Go implementation of DLX","body":"Package\r\n===\r\n\r\npackage goDLX\r\n\r\n    import \"github.com/jessecarl/goDLX\"\r\n\r\nPackage goDLX provides a Go implementation of Dancing Links Algorithm X\r\nby Donald Knuth.\r\n\r\nI'm attempting to follow the paper as exactly as possible to start. I\r\ncan cater it a bit more to to [Go](http://golang.org) way of solving the\r\nproblem once the initial implementation is complete.\r\n\r\nTypes\r\n===\r\n\r\n    type Head struct {\r\n        // contains filtered or unexported fields\r\n    }\r\n\r\nHead nodes are the master column headers. These nodes form the heart of\r\neach sparse matrix\r\n\r\n    func New() *Head\r\n\r\nNew starts a new sparse matrix by creating the Head node.\r\n\r\n    func (h *Head) AddCol(name string, optional bool) error\r\n\r\nAddCol adds a Column to the matrix. Each column has a name for reference\r\nand can be set to optional. Where required columns have one and only one\r\nvalid row, optional columns have zero or one valid row.\r\n\r\n    func (h *Head) AddRow(cols []string) error\r\n\r\nAddRow adds a row to the matrix Each row is populated by adding links\r\nfor every column named in the cols array. Once rows are added, the\r\nmatrix is locked and no further columns may be added.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}